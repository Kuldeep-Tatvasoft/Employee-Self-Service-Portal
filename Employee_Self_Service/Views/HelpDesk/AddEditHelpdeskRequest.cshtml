@* @model Employee_Self_Service_DAL.ViewModel.AddHelpDeskRequestViewModel
@{
var username = Context.Request.Cookies["employeeName"];
string? employeeId = Context.Request.Cookies["EmployeeId"];
}
<div class="d-flex flex-column py-3">
<div class="px-3 d-flex justify-content-between align-items-center">
<div>
<span>HelpDesk/Self</span>
@if (@Model.HelpDeskRequestId == 0)
{
<h4 class="d-flex align-content-center m-0">Add HelpDesk Request</h4>
}
else
{
<h4 class="d-flex align-content-center m-0">Edit HelpDesk Request</h4>
}
</div>
</div>
<hr class="dropdown-divider">

<form asp-action="AddEditHelpDeskRequest" asp-controller="HelpDesk" method="post">
<div class="details">
<input type="hidden" asp-for="HelpDeskRequestId">
<input type="hidden" asp-for="@Model.EmployeeId" value="@employeeId">

<div class="row col col-xxl-6 col-xl-7 col-lg-12 px-4">
<!-- First Row -->
<label for="itemName" class="p-0 mb-1">Name</label>
<input type="text" class="form-control rounded-0 shadow-none border-2" asp-for="@username" id="Name"
value="@username" readonly>

<!-- Second Row -->
<label for="itemName" class="p-0 mb-1">Requested DateTime</label>
<input type="datetime" class="form-control rounded-0" id="requestedDate" asp-for="RequestedDate"
value="@Model.RequestedDate.ToString("dd-MMM-yyyy hh:mm tt")" readonly>
<span asp-validation-for="RequestedDate" class="text-danger"></span>

<!-- Third Row -->
<label class="p-0 mb-1 mt-3">Group*</label>
<select asp-for="GroupId" class="form-select rounded-0 shadow-none border-2" id="Groups" asp-items="@ViewBag.Groups"
aria-placeholder="Select Group">
<option value="">Select Group</option>
</select>
<span asp-validation-for="GroupId" class="text-danger"></span>

<!-- Fourth Row -->
<label class="p-0 mb-1 mt-3">Category*</label>
<select asp-for="CategoryId" class="form-select rounded-0 shadow-none border-2" id="Categories"
asp-items="@ViewBag.Categories"
aria-placeholder="Select Category">
</select>
<span asp-validation-for="CategoryId" class="text-danger"></span>

<!-- Fifth Row -->
<label class="p-0 mb-1 mt-3">Sub Categories*</label>

<select class="form-multi-select p-0" multiple data-coreui-search="true" >

</select>

<select asp-for="SubCategoryId" class="form-select rounded-0 shadow-none border-2" id="SubCategories"
asp-items="@ViewBag.SubCategories" >
</select>
<span asp-validation-for="SubCategoryId" class="text-danger"></span>

<!-- Sixth Row -->
<label class="p-0 mb-1 mt-3">Priority*</label>
<select asp-for="Priority" class="form-select rounded-0 shadow-none border-2"
asp-items="ViewBag.PriorityList">
<option value="">Select Priority</option>
</select>
<span asp-validation-for="Priority" class="text-danger"></span>

<!-- Seventh Row -->
<label for="itemName" class="p-0 mb-1 mt-3">Service Details*</label>
<textarea class="form-control rounded-0 shadow-none border-2" rows="4" asp-for="@Model.ServiceDetails"
aria-required="false" aria-invalid="false"></textarea>
<span asp-validation-for="ServiceDetails" class="text-danger"></span>

<!-- Submit and Cancel Buttons -->
<div class="d-flex justify-content-start mt-4 gap-2 p-0">
<button type="submit" id="customDateApplyModel" class="btn btn-primary rounded-0">Save</button>
<a href="/HelpDesk/HelpDeskRequest"><button type="button" class="btn btn-white text-primary border-primary
rounded-0">Cancel</button></a>
</div>
</div>
</div>
</form>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script src="~/js/helpdesk.js" asp-append-version="true"></script>

<script>
$(document).ready(function () {
function formatDateTime(dateString) {
const date = new Date(dateString);
const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
const day = date.getDate().toString().padStart(2, '0');
const month = months[date.getMonth()];
const year = date.getFullYear();
let hours = date.getHours();
const minutes = date.getMinutes().toString().padStart(2, '0');
const ampm = hours >= 12 ? 'PM' : 'AM';
hours = hours % 12 || 12;
return `${day}-${month}-${year} ${hours}:${minutes} ${ampm}`;
}


const requestedDate = $('#requestedDate').val();
console.log(requestedDate);
if (requestedDate) {
const formattedDateTime = formatDateTime(requestedDate);
$('#requestedDate').val(formattedDateTime);
}

if (@Model.HelpDeskRequestId == 0) {
const now = new Date();
const formattedDateTime = formatDateTime(now);
$('#requestedDate').val(formattedDateTime);

$.getJSON('@Url.Action("GetGroups", "HelpDesk")', function (groups) {
var groupsSelect = $('#Groups');
groupsSelect.empty();
$('#Categories').empty().append('<option value="">Select Category</option>');
$('#SubCategories').empty().append('<option value="">Select Sub Category</option>');
groupsSelect.append($('<option/>', { text: "Select Group" }));

$.each(groups, function (index, group) {
groupsSelect.append($('<option/>', {
value: group.value,
text: group.text
}));
});
$('#Groups').valid();
});
}

$('#Groups').change(function () {
var groupId = $(this).val();
$('#Categories').prop('disabled', false);
$.getJSON('@Url.Action("GetCategories")', { groupId: groupId }, function (categories) {
var categoriesSelect = $('#Categories');
categoriesSelect.empty().append('<option value="">Select Category</option>');
$('#SubCategories').empty().append('<option value="">Select Sub Category</option>');
$.each(categories, function (index, category) {
categoriesSelect.append($('<option/>', {
value: category.value,
text: category.text
}));
});

$('#Categories').valid();
});
});

$('#Categories').change(function () {
const categoryId = $(this).val();
populateSubCategories(categoryId);
});

function populateSubCategories(categoryId) {
const subCategoriesSelect = $('#SubCategories');
const subCategoryDropdownMenu = $('#subCategoryDropdownMenu');
const subCategoryCheckboxDropdown = $('#subCategoryCheckboxDropdown');

subCategoriesSelect.empty();
subCategoryDropdownMenu.empty();

if (categoryId == 3) {
// Show the checkbox dropdown and hide the standard dropdown
subCategoriesSelect.addClass('d-none');
subCategoryCheckboxDropdown.removeClass('d-none');

// Fetch subcategories and populate the dropdown with checkboxes
$.getJSON('@Url.Action("GetSubCategories", "HelpDesk")', { categoryId: categoryId }, function (subCategories) {
$.each(subCategories, function (index, subCategory) {
const checkboxItem = `
<li>
<div class="form-check">
<input class="form-check-input subCategoryCheckbox" type="checkbox" value="${subCategory.value}"
id="subCategory_${subCategory.value}">
<label class="form-check-label" for="subCategory_${subCategory.value}">
${subCategory.text}
</label>
</div>
</li>
`;
subCategoryDropdownMenu.append(checkboxItem);
});

// Update selected subcategories when checkboxes are clicked
$('.subCategoryCheckbox').change(function () {
updateSelectedSubCategories();
});
});
} else {
// Show the standard dropdown and hide the checkbox dropdown
subCategoriesSelect.removeClass('d-none');
subCategoryCheckboxDropdown.addClass('d-none');

// Fetch subcategories and populate the standard dropdown
$.getJSON('@Url.Action("GetSubCategories", "HelpDesk")', { categoryId: categoryId }, function (subCategories) {
subCategoriesSelect.append('<option value="">Select Sub Category</option>');
$.each(subCategories, function (index, subCategory) {
subCategoriesSelect.append($('<option/>', {
value: subCategory.value,
text: subCategory.text
}));
});

// Update selected subcategories when a single dropdown option is selected
subCategoriesSelect.change(function () {
updateSelectedSubCategories();
});
});
}
}

function updateSelectedSubCategories() {
const selectedSubCategories = [];
const selectedSubCategoryIds = [];

if ($('#Categories').val() == 3) {
// Collect selected checkbox values for CategoryId 3
$('.subCategoryCheckbox:checked').each(function () {
selectedSubCategories.push($(this).next('label').text());
selectedSubCategoryIds.push($(this).val());
});
} else {
// Collect selected dropdown value for other CategoryIds
const selectedOption = $('#SubCategories option:selected');
if (selectedOption.length > 0) {
selectedSubCategories.push(selectedOption.text());
selectedSubCategoryIds.push(selectedOption.val());
}
}

$('#selectedSubCategories').text(selectedSubCategories.length > 0 ? selectedSubCategories.join(', ') : 'Select Sub
Categories');
$('#selectedSubCategoryIds').val(selectedSubCategoryIds.join(','));
}



// Submit form via AJAX
$('#customDateApplyModel').click(function (e) {
e.preventDefault();

const formData = {
HelpDeskRequestId: $('#HelpDeskRequestId').val(),
EmployeeId: $('#EmployeeId').val(),
GroupId: $('#Groups').val(),
CategoryId: $('#Categories').val(),
SubCategoryIds: $('#selectedSubCategoryIds').val().split(','),
Priority: $('#Priority').val(),
ServiceDetails: $('#ServiceDetails').val(),
RequestedDate: $('#requestedDate').val()
};

$.ajax({
url: '/HelpDesk/AddEditHelpDeskRequest',
type: 'POST',
data: formData,
success: function (response) {
if (response.success) {
alert('Request submitted successfully!');
} else {
alert('Error submitting request.');
}
},
error: function () {
alert('An error occurred while submitting the request.');
}
});
});
});
</script> *@


@model Employee_Self_Service_DAL.ViewModel.AddHelpDeskRequestViewModel
 
@{
    var username = Context.Request.Cookies["employeeName"];
    string? employeeId = Context.Request.Cookies["EmployeeId"];
    string? userRole = Context.Request.Cookies["role"];
}

<div class="d-flex flex-column py-3">
    <div class="px-3 d-flex justify-content-between align-items-center">
        <div>
            <span>HelpDesk/Self</span>
            @if (@Model.HelpDeskRequestId == 0)
            {
                <h4 class="d-flex align-content-center m-0">Add HelpDesk Request</h4>
            }
            else
            {
                <h4 class="d-flex align-content-center m-0">Edit HelpDesk Request</h4>
            }
        </div>
    </div>
    <hr class="dropdown-divider">

    <form asp-action="AddEditHelpDeskRequest" asp-controller="HelpDesk" method="post" id="helpDeskForm">
        <div class="details">
            <input type="hidden" asp-for="HelpDeskRequestId">
            <input type="hidden" asp-for="EmployeeId" value="@employeeId">
            <input type="hidden" asp-for="Group" id="selectedGroupText" />
            <input type="hidden" asp-for="StatusId" id="Status">
            <div class="row col col-xxl-6 col-xl-7 col-lg-12 px-4">
                <!-- First Row: Name -->
                <label for="Name" class="p-0 mb-1">Name</label>
                <input type="text" class="form-control rounded-0 shadow-none border-2"  id="Name" asp-for="EmployeeName"  value="@username"
                    readonly>

                <!-- Second Row: Requested DateTime -->
                <label for="requestedDate" class="p-0 mb-1 mt-3">Requested DateTime</label>
                <input type="datetime" class="form-control rounded-0" id="requestedDateDisplay" asp-for="RequestedDate"
                    value="@Model.RequestedDate.ToString("dd-MMM-yyyy hh:mm tt")" readonly>
                <span asp-validation-for="RequestedDate" class="text-danger"></span>
                @* <input type="datetime-local" class="form-control rounded-0 shadow-none border-2 d-none"
                    id="requestedDate" asp-for="RequestedDate" value="@Model.RequestedDate.ToString("dd-MMM-yyyy hh:mm tt")">
                <input type="text" class="form-control rounded-0 shadow-none border-2" id="requestedDateDisplay"
                    readonly> *@
                @* <span asp-validation-for="RequestedDate" class="text-danger"></span> *@

                <!-- Third Row: Group -->
                <label class="p-0 mb-1 mt-3">Group*</label>
                <select asp-for="GroupId" class="form-select rounded-0 shadow-none border-2" id="Groups"
                    asp-items="@ViewBag.Groups">
                    <option value="">Select Group</option>
                    
                </select>
                <span asp-validation-for="GroupId" class="text-danger"></span>

                <!-- Fourth Row: Category -->
                <label class="p-0 mb-1 mt-3">Category*</label>
                <select asp-for="CategoryId" class="form-select rounded-0 shadow-none border-2" id="Categories">
                    <option value="">Select Category</option>
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>

                <!-- Fifth Row: Sub Categories -->
                <label class="p-0 mb-1 mt-3">Sub Categories*</label>
                <!-- Single Dropdown for both single and multi-select, always named selectedSubCategories -->
                <select asp-for="selectedSubCategories" class="form-select rounded-0 shadow-none border-2 " id="SubCategories"
                    name="selectedSubCategories">
                    <option value="">Select Sub Category</option>
                </select>
                @* <span class="text-danger" id="subCategoryValidation"></span> *@
                <span asp-validation-for="selectedSubCategories" class="text-danger" id="subCategoryValidation"></span>

                <!-- Sixth Row: Priority -->
                <label class="p-0 mb-1 mt-3">Priority*</label>
                <select asp-for="Priority" class="form-select rounded-0 shadow-none border-2" id="Priority"
                    asp-items="ViewBag.PriorityList">
                    <option value="">Select Priority</option>
                </select>
                <span asp-validation-for="Priority" class="text-danger"></span>

                <!-- Seventh Row: Service Details -->
                <label for="ServiceDetails" class="p-0 mb-1 mt-3">Service Details*</label>
                <textarea class="form-control rounded-0 shadow-none border-2" rows="4"
                    asp-for="ServiceDetails"></textarea>
                <span asp-validation-for="ServiceDetails" class="text-danger"></span>

                <!-- Submit and Cancel Buttons -->
                <div class="d-flex justify-content-start mt-4 gap-2 p-0">
                    <button type="submit" id="customDateApplyModel" class="btn btn-primary rounded-0">Save</button>
                    @if(Model.HelpDeskRequestId !=0){
                    <button type="submit" id="cancel" class="btn btn-primary rounded-0" value="3" >Cancel</button>
                    }
                    <a href="/HelpDesk/HelpDeskRequest"><button type="button"
                            class="btn btn-white text-primary border-primary rounded-0">Cancel</button></a>
                </div>
            </div>
        </div>
    </form>
</div>

   
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
    <script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@@coreui/coreui@5.15.0/dist/js/coreui.bundle.min.js"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/@@coreui/coreui-pro@5.15.0/dist/js/coreui.bundle.min.js"></script>
    <script>
        $(document).ready(function () {
            if("@userRole" == "HR")
            {   
                var statusId = 2
                $("#Status").val(statusId);
            }
            $("#cancel").on('click',function(e)
            {
                var statusId = $(this).val();
                $("#Status").val(statusId);
            });
        });
    </script>
    <script>
        
        $(document).ready(function () {
            
            const selectedSubCategoryIds = [];
            let selectedSubCategories = [];
            var selectedSubCategoryIdsForCategory3 = @Html.Raw(Json.Serialize(Model.selectedSubCategories ?? Array.Empty<int>()));
            selectedSubCategoryIdsForCategory3.forEach(sub => selectedSubCategoryIds.push(sub));
            console.log(selectedSubCategoryIdsForCategory3);
            console.log(selectedSubCategoryIds);
        @* selectedSubCategoryIds.push(...multiSelectInstance.getValue().map(Number));
                selectedSubCategories = $('#SubCategories option:selected').map(function () {
                    return $(this).text();
                }).get(); *@
                var subCategoriesSelect = $('#SubCategories');

            let multiSelectInstance = null;

            function formatDateTime(date) {
                if (!date) return '';
                const d = new Date(date);
                const months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
                const day = d.getDate().toString().padStart(2, '0');
                const month = months[d.getMonth()];
                const year = d.getFullYear();
                let hours = d.getHours();
                const minutes = d.getMinutes().toString().padStart(2, '0');
                const ampm = hours >= 12 ? 'PM' : 'AM';
                hours = hours % 12 || 12;
                return `${day}-${month}-${year} ${hours}:${minutes} ${ampm}`;
            }

            if (@Model.HelpDeskRequestId === 0) {
                const now = new Date();
                $('#requestedDate').val(now.toISOString().slice(0, 16));
                $('#requestedDateDisplay').val(formatDateTime(now));
                }
            @* } else if ($('#requestedDate').val()) {
                const dateVal = new Date($('#requestedDate').val());
                $('#requestedDate').val(dateVal.toISOString().slice(0, 16));
                $('#requestedDateDisplay').val(formatDateTime(dateVal));
            } *@

            $.getJSON('@Url.Action("GetGroups", "HelpDesk")', function (groups) {
                const groupsSelect = $('#Groups');
                groupsSelect.empty().append('<option value="">Select Group</option>');
                $.each(groups, function (index, group) {
                    groupsSelect.append($('<option/>', {
                        value: group.value,
                        text: group.text,
                        selected: group.value == '@Model.GroupId'
                    }));
                });
                if (@Model.GroupId > 0) {
                    $('#Groups').trigger('change');
                }
            });

            $('#Groups').change(function () {
                const groupId = $(this).val();

                var group = $('#Groups option:selected').text();
                $('#selectedGroupText').val(group);
                const categoriesSelect = $('#Categories');
                categoriesSelect.empty().append('<option value="">Select Category</option>');

        @* $('#SubCategories').empty().append('<option value="">Select Sub Category</option>').removeClass('form-multi-select').addClass('form-select').removeAttr('multiple'); *@
        @* $('#subCategoryValidation').text(''); *@
        @* selectedSubCategoryIdsForCategory3 = [];  *@

                    if (multiSelectInstance) {
                    multiSelectInstance = null;
                }

                if (groupId) {
                    $.getJSON('@Url.Action("GetCategories", "HelpDesk")', { groupId: groupId }, function (categories) {
                        $.each(categories, function (index, category) {
                            categoriesSelect.append($('<option/>', {
                                value: category.value,
                                text: category.text,
                                selected: category.value == '@Model.CategoryId'
                            }));
                        });
                        subCategoriesSelect.empty().append('<option value="">Select Sub Category</option>').removeClass('form-multi-select').addClass('form-select').removeAttr('multiple');
                        $('#subCategoryValidation').text('');
                        if (@Model.CategoryId > 0) {
                            populateSubCategories(@Model.CategoryId);
                        }
                    });
                }

            });

            $('#Categories').change(function () {
                const categoryId = $(this).val();

                populateSubCategories(categoryId);

            });

            function populateSubCategories(categoryId) {

                var subCategoriesSelect = $('#SubCategories');
                subCategoriesSelect.empty().append('<option value="">Select Sub Category</option>').removeClass('form-multi-select p-0').addClass('form-select').removeAttr('multiple');
                $('#subCategoryValidation').text('');

                if (multiSelectInstance) {
                    multiSelectInstance = null;
                }

                if (categoryId) {
                    $.getJSON('@Url.Action("GetSubCategories", "HelpDesk")', { categoryId: categoryId }, function (subCategories) {
                        if (categoryId == 3) {


                            subCategoriesSelect.removeClass('form-select').addClass('form-multi-select p-0').attr('multiple', 'multiple');
                            @* $("#SubCategories").style.removeProperty('display'); *@
                            $.each(subCategories, function (index, subCategory) {
                                const isSelected = selectedSubCategoryIdsForCategory3.includes(subCategory.value);
                                    subCategoriesSelect.append($('<option/>', {
                                        value: subCategory.value,
                                        text: subCategory.text,
                                        selected: isSelected
                                    }));
                            });
                            multiSelectInstance = new coreui.MultiSelect(document.getElementById('SubCategories'), {
                                search: true,
                                multiple: true,
                                onChange: updateSelectedSubCategories
                            });
                        } else {

                            
                            subCategoriesSelect.removeClass('form-multi-select').addClass('form-select').removeAttr('multiple');
                            @* subCategoriesSelect.style.removeProperty('display'); *@
                            $(".form-multi-select").addClass('d-none');

                            $.each(subCategories, function (index, subCategory) {
                                const singleSelected = selectedSubCategoryIdsForCategory3.includes(subCategory.value);
                                console.log(singleSelected);
                                subCategoriesSelect.append($('<option/>', {
                                    value: subCategory.value,
                                    text: subCategory.text,

                                    selected: singleSelected
                                }));
                            });
                        }
                        updateSelectedSubCategories();
                    });
                }
            }

            // Update selected SubCategoryIds
            function updateSelectedSubCategories() {
                const selectedSubCategoryIds = [];
                let selectedSubCategories = [];

                if ($('#Categories').val() == 3 && multiSelectInstance) {
                    selectedSubCategoryIds.push(...multiSelectInstance.getValue().map(Number));
                    selectedSubCategories = $('#SubCategories option:selected').map(function () {
                        return $(this).text();
                    }).get();
                    selectedSubCategoryIdsForCategory3 = selectedSubCategoryIds;
                    console.log(selectedSubCategoryIds);
                } else {

                    const selectedOption = $('#SubCategories option:selected');
                    if (selectedOption.val()) {
                        selectedSubCategoryIds.push(Number(selectedOption.val()));
                        selectedSubCategories.push(selectedOption.text());
                        selectedSubCategoryIdsForCategory3 = selectedSubCategoryIds;
                    }
                }

                const label = selectedSubCategories.length > 0 ? selectedSubCategories.join(', ') : 'Select Sub Categories';
                $('#SubCategories').siblings('.form-multi-select-label').text(label);
                console.log(selectedSubCategoryIds);
                $('#subCategoryValidation').text(selectedSubCategoryIds.length > 0  ? '' : 'Please select at least one sub category.');
                @* $('#subCategoryValidation').selectedSubCategoryIds.length ? '' : 'Please select at least one sub category.'; *@
                @* console.log(selectedSubCategoryIdsForCategory3); *@
            }

            @* $('#helpDeskForm').validate({
                rules: {
                    GroupId: { required: true },
                    CategoryId: { required: true },
                    selectedSubCategories: {
                        required: true,
                        minlength: 1
                    },
                    Priority: { required: true },
                    ServiceDetails: { required: true },
                    RequestedDate: { required: true }
                },
                messages: {
                    GroupId: "Please select a group.",
                    CategoryId: "Please select a category.",
                    selectedSubCategories: "Please select at least one sub category.",
                    Priority: "Please select a priority.",
                    ServiceDetails: "Please enter service details.",
                    RequestedDate: "Please select a requested date."
                },
                errorPlacement: function (error, element) {
                    if (element.attr('name') === 'selectedSubCategories') {
                        error.appendTo('#subCategoryValidation');
                    } else {
                        error.insertAfter(element);
                    }
                },
                submitHandler: function (form) {
                    if (!$(form).valid()) return; // Ensure validation passes
                    const formData = $(form).serializeArray().reduce(function (obj, item) {
                        obj[item.name] = item.value;
                        return obj;
                    }, {});
                    formData.selectedSubCategories = $('#SubCategoriesHidden').val() || [];

                    $.ajax({
                        url: form.action,
                        type: 'POST',
                        data: JSON.stringify(formData),
                        contentType: 'application/json',
                        success: function (response) {
                            if (response.success) {
                                toastr.success(response.message);
                                setTimeout(() => window.location.href = '/HelpDesk/HelpDeskRequest', 1000);
                            } else {
                                toastr.error(response.message);
                            }
                        },
                        error: function () {
                            toastr.error('An error occurred while submitting the request.');
                        }
                    });
                }
            }); *@

            // Form validation
            $('#helpDeskForm').validate({
                rules: {
                    
                    selectedSubCategories: {
                        required: true,
                        minlength: 1
                    },
                    
                },
                messages: {
                    
                    selectedSubCategories: "Please select at least one sub category.",
                    
                },
                errorPlacement: function (error, element) {
                    if (element.attr('name') === 'selectedSubCategories') {
                        error.appendTo('#subCategoryValidation');
                    } else {
                        error.insertAfter(element);
                    }
                },
                
            });




            // Update subcategories on change
            $('#SubCategories').on('change', updateSelectedSubCategories);
        });
    </script>
