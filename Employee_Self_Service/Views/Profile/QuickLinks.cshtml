@{
    Layout = "_Layout";
}
@model List<Employee_Self_Service_DAL.ViewModel.QuickLinkViewModel>
<div class="container-fluid">
    <!-- Widget Management Table -->
    <div class="row py-4">
        <div class="px-3 d-flex justify-content-between align-items-center">
            <h4 class=" d-flex align-content-center m-0">Manage Quick Links</h4>
            <button type="button" class="btn btn-white border-primary text-primary"> <a href="/Home/Index"
                    class=" text-decoration-none">
                    < Back</a> </button>
        </div>
        <hr class="dropdown-divider">
        <div class="">
            <table class="table table-bordered" id="quickLinksTable">
                <thead>
                    <tr>
                        <th style="white-space: nowrap;">No.</th>
                        <th style="white-space: nowrap;">Name</th>
                        <th style="white-space: nowrap;">URL</th>
                        <th style="white-space: nowrap;">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @if (Model != null)
                    {
                        @for (int i = 0; i < Model.Count; i++)
                        {
                            <tr>
                                <td>@(i + 1)</td>
                                <td>
                                    <input type="hidden" name="QuickLinks[@i].QuickLinkId" value="@Model[i].QuickLinkId" />
                                    <input type="text" name="QuickLinks[@i].Name" class="form-control name-input" value="@Model[i].Name" />
                                    <span class="validation-error text-danger"></span>
                                </td>
                                <td>
                                    <input type="text" name="QuickLinks[@i].Url" class="form-control url-input" value="@Model[i].Url" />
                                    <span class="validation-error text-danger"></span>
                                </td>
                                <td>
                                    <button type="button" class="btn btn-link text-danger delete-row"><i
                                            class="fas fa-trash"></i></button>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <button type="button" class="btn btn-link" id="addRow">+ Add</button>
            <button type="button" class="btn btn-primary" id="saveQuickLinks">Save</button>
        </div>
    </div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>
    let rowIndex = $('#quickLinksTable tbody tr').length;

    function isValidRow(name, url) {
        return name.trim() !== '' && url.trim() !== '';
    }

    function hasEmptyRow() {
        let empty = false;
        $('#quickLinksTable tbody tr').each(function () {
            const name = $(this).find('input[name$=".Name"]').val();
            const url = $(this).find('input[name$=".Url"]').val();
            if (!isValidRow(name, url)) {
                empty = true;
            }
        });
        return empty;
    }

    $('#addRow').click(function () {
        if (hasEmptyRow()) {
            alert('Please fill in the empty row before adding a new one.');
            return;
        }

        rowIndex++;
        const row = `
            <tr class="new-row">
                <td>${rowIndex}</td>
                <td><input type="text" name="QuickLinks[${rowIndex - 1}].Name" class="form-control name-input" /></td>
                <span class="validation-error text-danger"></span>
                <td><input type="text" name="QuickLinks[${rowIndex - 1}].Url" class="form-control url-input" /></td>
                <span class="validation-error text-danger"></span>
                <td>
                    <button type="button" class="btn btn-link text-danger delete-row"><i class="fas fa-trash"></i></button>
                </td>
            </tr>`;
        $('#quickLinksTable tbody').append(row);
    });

    $(document).on('click', '.delete-row', function () {
        $(this).closest('tr').remove();
        updateSerialNumbers();
    });

    function updateSerialNumbers() {
        rowIndex = 0;
        $('#quickLinksTable tbody tr').each(function () {
            rowIndex++;
            $(this).find('td:first').text(rowIndex);
            $(this).find('input[name$=".Name"]').attr('name', `QuickLinks[${rowIndex - 1}].Name`);
            $(this).find('input[name$=".Url"]').attr('name', `QuickLinks[${rowIndex - 1}].Url`);
        });
    }

    // SAVE only new rows
    $('#saveQuickLinks').click(function () {
        const quickLinks = [];
        let isValid = true;

    $('#quickLinksTable tbody tr').each(function () {
        const $row = $(this);
        const id = parseInt($row.find('input[name$=".QuickLinkId"]').val()) || 0;
        const $nameInput = $row.find('.name-input');
        const $urlInput = $row.find('.url-input');

        const name = ($nameInput.val() || '').trim();
        const url = ($urlInput.val() || '').trim();
        // Clear previous validation
        $row.find('.validation-error').text('');
        $nameInput.removeClass('is-invalid');
        $urlInput.removeClass('is-invalid');

        if (name === '') {
            $nameInput.addClass('is-invalid');
            $nameInput.next('.validation-error').text('Name is required');
            isValid = false;
        }

        if (url === '') {
            $urlInput.addClass('is-invalid');
            $urlInput.next('.validation-error').text('URL is required');
            isValid = false;
        }

        if (name !== '' && url !== '') {
            quickLinks.push({ QuickLinkId: id, Name: name, Url: url });
        }
    });

    if (!isValid) {
        return; // prevent submission
    }


        $.ajax({
            url: '/Profile/QuickLinks',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(quickLinks),
            success: function (res) {
                
                location.reload();
            },
            error: function () {
                alert("Error saving links.");
            }
        });
    });
</script>

@* <div class="container-fluid">
<!-- Widget Management Table -->
<div class="row mb-4">
<div class="col-12">
<h4>Manage Links</h4>
<button id="addRow" class="btn btn-primary mb-2">Add</button>
<form id="linkForm" asp-action="SaveLinks" asp-controller="Home" method="post">
<table class="table table-bordered" id="linkTable">
<thead>
<tr>
<th>#</th>
<th>Name</th>
<th>URL</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<!-- Initial row will be added via JavaScript -->
</tbody>
</table>
<button type="submit" class="btn btn-success">Save</button>
</form>
<div id="validationMessage" class="text-danger mt-2" style="display: none;"></div>
</div>
</div>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>

<script>
document.addEventListener('DOMContentLoaded', function () {

let rowCount = 0;
const addRow = document.getElementById('addRow');
const tableBody = document.getElementById('linkTable').getElementsByTagName('tbody')[0];
const validationMessage = document.getElementById('validationMessage');


addInitialRow();

function addInitialRow() {
if (rowCount === 0 && !hasBlankRow()) {
rowCount++;
const newRow = document.createElement('tr');
newRow.innerHTML = `
<td>${rowCount}</td>
<td><input type="text" class="form-control name-input" name="links[${rowCount - 1}].Name" required></td>
<td><input type="url" class="form-control url-input" name="links[${rowCount - 1}].Url" required></td>
<td class="text-center"><button type="button" class="btn btn-danger delete-row"><i class="bi
bi-trash"></i></button></td>
`;
tableBody.appendChild(newRow);

// Add delete functionality
newRow.querySelector('.delete-row').addEventListener('click', function () {
newRow.remove();
renumberRows();
addRow.disabled = false; // Enable Add button if no blank row remains
rowCount--;
});
}
}

function hasBlankRow() {
const rows = tableBody.getElementsByTagName('tr');
for (let row of rows) {
const nameInput = row.getElementsByClassName('name-input')[0];
const urlInput = row.getElementsByClassName('url-input')[0];
if (nameInput && urlInput && !nameInput.value.trim() && !urlInput.value.trim()) {
return true;
}
}
return false;
}

function renumberRows() {
const rows = tableBody.getElementsByTagName('tr');
for (let i = 0; i < rows.length; i++) {
rows[i].cells[0].textContent = i + 1;
const inputs = rows[i].getElementsByTagName('input');
if (inputs.length >= 2) {
inputs[0].name = `links[${i}].Name`;
inputs[1].name = `links[${i}].Url`;
}
}
}

addRow.addEventListener('click', function (e) {
e.preventDefault();
if (hasBlankRow()) {
validationMessage.textContent = 'Please fill or delete the blank row before adding a new one.';
validationMessage.style.display = 'block';
return;
}
rowCount++;
const newRow = document.createElement('tr');
newRow.innerHTML = `
<td>${rowCount}</td>
<td><input type="text" class="form-control name-input" name="links[${rowCount - 1}].Name" required></td>
<td><input type="url" class="form-control url-input" name="links[${rowCount - 1}].Url" required></td>
<td class="text-center"><button type="button" class="btn btn-danger delete-row"><i class="bi
bi-trash"></i></button></td>
`;
tableBody.appendChild(newRow);

// Add delete functionality
newRow.querySelector('.delete-row').addEventListener('click', function () {
newRow.remove();
renumberRows();
addRow.disabled = false; // Enable Add button if no blank row remains
rowCount--;
if (!hasBlankRow() && rowCount === 0) addInitialRow(); // Add blank row if table is empty
});

addRow.disabled = true; // Disable Add button after adding a row
validationMessage.style.display = 'none';
});

// Form submission handling with validation
document.getElementById('linkForm').addEventListener('submit', function (e) {
const rows = tableBody.getElementsByTagName('tr');
const links = [];
let isValid = true;

for (let i = 0; i < rows.length; i++) {
const nameInput = rows[i].getElementsByClassName('name-input')[0];
const urlInput = rows[i].getElementsByClassName('url-input')[0];
const name = nameInput.value.trim();
const url = urlInput.value.trim();

if (!name || !url) {
isValid = false;
validationMessage.textContent = 'Please fill all Name and URL fields before saving.';
validationMessage.style.display = 'block';
} else {
links.push({ Id: i + 1, Name: name, Url: url });
}
}

if (!isValid) {
e.preventDefault();
return;
}

if (links.length > 0) {
console.log('Saving links:', links); // For debugging
alert('Links saved: ' + JSON.stringify(links));
} else {
e.preventDefault();
validationMessage.textContent = 'No valid links to save.';
validationMessage.style.display = 'block';
}
});
});
</script> *@