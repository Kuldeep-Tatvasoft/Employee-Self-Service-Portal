@model Employee_Self_Service_DAL.ViewModel.EventPaginationViewModel
@using Employee_Self_Service.DAL.Attributes
@using Employee_Self_Service_BAL.Helpers
@using System.Reflection
<div class="table-responsive px-0">
    <table class="table table-light">
        <thead>
            <tr>
                
                @{
                    var props = typeof(Employee_Self_Service_DAL.ViewModel.EventDetailsViewModel).GetProperties();

                }
                @foreach (var prop in props)
                {
                    var displayAttr = prop.GetCustomAttribute<DisplayColumnAttribute>();

                    if (displayAttr != null && displayAttr.IsVisible)
                    {
                        <th class="@(prop.PropertyType == typeof(DateTime) ? "" : "text-center")">
                            <a href="javascript:void(0)" onclick="sortBy('@prop.Name')"
                                class="text-decoration-none text-dark">@displayAttr.Name
                                <i class="bi bi-arrow-down-up" id="sort-by-@prop.Name.Replace('.', '-')"
                                    data-direction="asc"></i>
                            </a>
                        </th>
                    }
                }
                <th class="text-center">Status</th>
                <th class="text-center">Action</th>
            </tr>
        </thead>
        <tbody>
           
            @foreach (var data in Model.EventList)
            {
                <tr>
                    
                    @foreach (var prop in props)
                    {
                        var displayAttr = prop.GetCustomAttribute<DisplayColumnAttribute>();

                        if (displayAttr != null && displayAttr.IsVisible)
                        {
                            var value = prop.GetValue(data);
                            <td class="text-center">
                                @* @if (prop.Name == "Status")
                                {
                                    <span class="badge  @((data.EndDate < DateOnly.FromDateTime(DateTime.Now) ? "bg-danger" :
                                                        data.StartDate > DateOnly.FromDateTime(DateTime.Now) ? "bg-secondary" :
                                                        "bg-success") + " p-2")">
                                        @(data.EndDate < DateOnly.FromDateTime(DateTime.Now) ? "Expired" :
                                          data.StartDate > DateOnly.FromDateTime(DateTime.Now) ? "Upcoming" : "Ongoing")
                                    </span>
                                } *@
                                
                                @if (value is IEnumerable<string> Cats)
                                {
                                    foreach (var item in Cats ?? Enumerable.Empty<string>())
                                    {
                                        @item

                                        <br />
                                    }
                                }
                                else if (value is DateTime dt)
                                {
                                    @dt.ToString("dd-MMM-yyyy hh:mm tt")
                                }
                                else
                                {
                                    @value
                                }
                            </td>
                        }
                    }
                    <td class="text-center">
                        @if(data.EndDate < DateOnly.FromDateTime(DateTime.Now))
                        {
                            <span class="badge bg-danger p-2">Expired</span>
                        }
                        else if (data.StartDate > DateOnly.FromDateTime(DateTime.Now))
                        {
                            <span class="badge bg-secondary p-2">Upcoming</span>
                        }
                        else
                        {
                            <span class="badge bg-success p-2">Ongoing</span>
                        }
                    </td>
                    <td class="text-center">
                        <div class="d-flex align-items-center justify-content-center">
                            @if(data.EndDate > DateOnly.FromDateTime(DateTime.Now)){
                            <a asp-action="AddEditEvent" asp-controller="Event"
                                asp-route-eventId="@data.EventId" 
                                class="btn " type="button">
                                <i class="bi bi-pen"></i>
                            </a>   
                            
                            <a class="btn deleteEventBtn p-0" data-id="@data.EventId" data-bs-toggle="modal"
                                data-bs-target="#deleteEventModal">
                                <i class=" bi bi-trash text-black"></i>
                            </a> 
                            }                           
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

<!-- Pagination Section -->
<div class="d-flex flex-row justify-content-end  gap-2 mb-3 align-items-center">
    <p class="pt-3 text-black">Items per page</p>
    <div class="dropdown">
        <select class="form-select w-auto " onchange="EventPaginationAjax(@Model.Page.CurrentPage)"
            aria-label="Default select example" id="eventPageSize">
            @if (Model.Page.PageSize != null)
            {
                @* <option value="3" selected="@(Model.Page.PageSize == 3 ? true : false)">3</option> *@
                <option value="5" selected="@(Model.Page.PageSize == 5 ? true : false) selected">5</option>
                <option value="10" selected="@(Model.Page.PageSize == 10 ? true : false)">10</option>
                <option value="15" selected="@(Model.Page.PageSize == 15 ? true : false)">15</option>
            }
        </select>
    </div>
    <p class="pt-3 text-black">Showing @Model.Page!.FromRec - @Model.Page.ToRec of @Model.Page.TotalRecord</p>

    <!-- Previous Button -->
    <button class="btn btn-outline-primary col-auto"
        onclick="EventPaginationAjax(@Model.Page.CurrentPage - 1)" @(Model.Page.CurrentPage > 1 ? "" :
        "disabled")> &lt; </button>

    <!-- Next Button -->
    <button class="btn btn-outline-primary col-auto"
        onclick="EventPaginationAjax(@Model.Page.CurrentPage + 1)" @(Model.Page.CurrentPage <
        Model.Page.TotalPages ? "" : "disabled")> &gt; </button>
</div>

<script src="~/lib/jquery/dist/jquery.min.js"></script>